// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define el modelo de productos
model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  image_url   String
  variants    Variant[] // Relación uno a muchos con las variantes
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
}

model Category {
  id            Int @id @default(autoincrement())
  name          String
  description   String
  products      Product[]
}

// Define el modelo de variantes
model Variant {
  id         Int        @id @default(autoincrement())
  productId  Int
  product    Product    @relation(fields: [productId], references: [id])
  size       String     // Talla del producto (por ejemplo, "32", "36", "38")
  color      String     // Color del producto
  stock      Int        // Cantidad disponible en inventario
  orderItems OrderItem[] // Relación uno a muchos con los ítems de pedido
}

// Define el modelo de clientes
model Customer {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  address   String
  city      String
  country   String
  orders    Order[]  // Relación uno a muchos con los pedidos
}

// Define el modelo de pedidos
model Order {
  id         Int      @id @default(autoincrement())
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])
  orderDate  DateTime
  status     String   // Estado del pedido (por ejemplo, "En proceso", "Entregado")
  items      OrderItem[]
}

// Define el modelo de ítems de pedido
model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])
  variantId  Int
  variant    Variant  @relation(fields: [variantId], references: [id])
  quantity   Int      // Cantidad de productos en el pedido
  unitPrice  Float    // Precio unitario del producto
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
